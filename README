# -*- mode: org; -*-
* Manifest
  A series of dot files for users. Included:

  - useful .cshrc
  - basic .emacs files
  - .psqlrc file for psql(1)
  - .digrc file for dig(1)
  - .cvsrc file for cvs(1) (really?? who uses this POS anymore anyway?)
* tcsh
  I use and recommend tcsh(1) for day-to-day use and then sh(1) for
  scripting. Most bash(1) use bash(1) because they've never questioned the
  use of the default shell shipped by Linux.

  New tcsh(1) users, scroll down for a list of immediately useful benefits.

** Installation walk-through:
***  One-off install:
     % curl -o ~/.cshrc https://raw.github.com/sean-/cshrc/master/.cshrc
     % curl -o ~/.local.tcsh https://raw.github.com/sean-/cshrc/master/.local.tcsh.dist
     % curl -o ~/.site.tcsh https://raw.github.com/sean-/cshrc/master/.site.tcsh.dist
     % exec /bin/tcsh

*** Poweruser install:
**** Download Instructions:
    % cd ~/src
    % git clone https://github.com/sean-/cshrc.git
    % cd cshrc

**** INSTALL Instructions:
     % less .cshrc     # _Always_ review changes to your shell config
     % cp .cshrc ~/    # Install the configured tcsh(1) hotness
     % cp .local.tcsh.dist ~/.local.tcsh # Install the local tcsh settings file
     % cp .site.tcsh.dist ~/.site.tcsh   # Install the site tcsh settings file
     % exec /bin/tcsh  # Start using tcsh(1)
     % chsh /bin/tcsh  # Change your default shell once you feel comfortable

**** UPGRADE Instructions:
    % cd ~/src/cshrc
    % git pull
    % diff -u .cshrc ~/.cshrc
    Merge whatever changes you've made and didn't put in a ~/.local.tcsh file
    % cp .cshrc ~/.cshrc
* New tcsh users, the biggest set of "new features" are:
** "Up-arrow" searching through history

    cat /etc/resolv.conf     # Push a command in to your history
    cp /etc/resolv.conf /tmp # A filler command in your history
    cat /etc/group           # Add another cat(1) command
    cd ~/                    # Another filler command
    cat /tmp/resolv.conf     # Yet add another cat(1) command
    echo Use printf instead  # Yet another filler command
    ca[up-arrow]             # From here, you can use the up and down arrows
    # to search through your entire history for entries that begin with "ca",
    # specifically you'll see all three "cat /" commands (if not more,
    # depending on your history). You can increase the specificity and have it
    # search for `cat /etc` vs `cat /tmp`, too. Very, very useful. Another
    # example:
    #
    # % git flow hotfix start better_uparrow_example
    # % [ Do a series of commands and commits]
    # % git f[up-arrow]
    # % git flow hotfix start better_uparrow_example
    # % [Use the back arrow to change start to finish]
    # % git flow hotfix finish better_uparrow_example

    The utility of this simple mechanism can't be understated.
** Tab-completion of ssh hosts. e.g.

   % ssh host1[TAB]           # Yields the following:
   % ssh host01.example.com
** Useful time information. e.g.:

   % time sudo port install py27-ipython
   Time spent in user mode   (CPU seconds) : 6.795s
   Time spent in kernel mode (CPU seconds) : 5.118s
   Total time                              : 0:31.25s
   CPU utilization (percentage)            : 38.0%
   Times the process was swapped           : 0
   Times of major page faults              : 0
   Times of minor page faults              : 0
** Duplicates removed from history.
   Self-explanatory.
** Tab completion of arguments for programs (e.g. git(1), sysctl(1), gdb(1),
   gcc(1), chown(1), ping(1), mtr(1), etc). See the 'complete' section for
   more examples or to learn how to extend argument completion for additional
   commands (feel free to suggest improvements).
** Per-directory settings
   Ever want to set an environment variable conditionally upon entering a
   directory (and possibly unset it when you leave the directory)? Here's are
   two examples, one for python's virtualenv and another for C++ development:

   The python virtualenv example:

        % cd ~/src/flask-skeleton
        Activating the "flask-skeleton" virtual environment.
        % which python
        ~/src/flask-skeleton/bin/python

   And here's the magic (from: https://github.com/sean-/flask-skeleton/blob/HEAD/.enter.tcsh):

        % cat .enter.tcsh
        # To turn off the virtualenv, type: deactivate

        # Don't do anything if a virtual environment is already loaded
        if ( ${?VIRTUAL_ENV} == "1" ) exit 0

        printf 'Activating the "%s" virtual environment.\n' `basename $PWD`
        source bin/activate.csh >& /dev/null

    Suppose a project ships with a .enter.tcsh file and you want to override
    the settings (from: https://github.com/sean-/Boost.Examples/blob/HEAD/.enter.tcsh):

        # Use .tcsh.local to provide settings that are specific to your local environment
        if (-o .enter.local.tcsh && -P22 .enter.local.tcsh == "0") source .enter.local.tcsh

        if ( ${?BOOST_INCDIR} == "0" ) then
            setenv BOOST_INCDIR $HOME/src/boost-trunk
            printf '[INFO] Setting BOOST_INCDIR environment variable to %s\n' ${BOOST_INCDIR}
        endif

        if ( ${?BOOST_LIBDIR} == "0" ) then
            setenv BOOST_LIBDIR $HOME/src/boost-trunk/lib
            printf '[INFO] Setting BOOST_LIBDIR environment variable to %s\n' ${BOOST_LIBDIR}
        endif

    Then simply add the following to your .enter.local.tcsh:

        if ( ${?BOOST_INCDIR} == "0" ) then
            setenv BOOST_INCDIR $HOME/src/boost/obj/contrib-Darwin-i386/include
            printf '[INFO] Setting BOOST_INCDIR environment variable to %s\n' ${BOOST_INCDIR}
        endif

        if ( ${?BOOST_LIBDIR} == "0" ) then
            setenv BOOST_LIBDIR $HOME/src/boost/obj/contrib-Darwin-i386/lib
            printf '[INFO] Setting BOOST_LIBDIR environment variable to %s\n' ${BOOST_LIBDIR}
        endif

        if ( ${?DYLD_FALLBACK_LIBRARY_PATH} == "0" ) then
            setenv DYLD_FALLBACK_LIBRARY_PATH $HOME/src/boost/obj/contrib-Darwin-i386/lib
            printf '[INFO] Setting DYLD_FALLBACK_LIBRARY_PATH environment variable to %s\n' ${DYLD_FALLBACK_LIBRARY_PATH}
        endif

    That way projects can ship with a .enter.tcsh file and you can still
    override the shipped settings as you see fit.
